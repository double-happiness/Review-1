//下一个较大元素
//现在我们有一个int数组，请你找出数组中每个元素的下一个比它大的元素。
//给定一个int数组A及数组的大小n，请返回一个int数组，代表每个元素比他大的下一个元素,
//若不存在则为 - 1。保证数组中元素均为正整数。
//测试样例：[11, 13, 10, 5, 12, 21, 3], 7
//返回：[13, 21, 12, 12, 21, -1, -1]

分析：
从后向前维护一个递减栈。  
     
最右边的那个值肯定没有最大值，所以肯定是-1。初始栈为-1。  
     
从后向前计算：  
  
    
（1）如果当前元素大于栈顶元素，则栈顶元素退出，如果还是大于栈顶元素，继续退出，
一直遍历栈到-1或者小于栈顶元素。这个元素就是就是当前值的下一个比较大的元素。  
     
（2）如果当前元素小于栈顶元素，栈顶元素就是当前值的下一个比较大的元素。


vector<int> findNext(vector<int> A, int n)
{
	vector<int> res;
	if (n <= 0)
		return res;
	stack<int> s;
	s.push(-1);
	for (int i = n - 1; i >= 0; --i)
	{
		int top = s.top();
		while (top != -1 && A[i] > top)
		{
			s.pop();
			top = s.top();
		}
		res.insert(res.begin(), top);
		s.push(A[i]);
	}
	return res;
}